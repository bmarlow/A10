import jsonimport httplibclass a10Device:    JSON_INDENT = 4    AUTH_URI = "/axapi/v3/auth"    LOGOFF_URI = "/axapi/v3/logoff"    LEVEL_NONE = -1    LEVEL_ERROR = 0    LEVEL_HTTP_STATUS_CODE = 1    LEVEL_DEBUG_ALL = 2    def __init__(self,                 hostIp,                 userName = 'admin',                 password = 'a10',                 debugLevel = LEVEL_HTTP_STATUS_CODE):        self.host = hostIp        self.username = userName        self.password = password        self.debugLevel = debugLevel    def printJson(self, jsonInput):        if self.debugLevel > self.LEVEL_HTTP_STATUS_CODE:            print json.dumps(jsonInput, indent = self.JSON_INDENT)    def post(self, uri, payload):        conn = httplib.HTTPSConnection(self.host)        jsonPayload = json.dumps(payload)        if self.debugLevel > self.LEVEL_HTTP_STATUS_CODE:            print "\nPOST "+ uri + "\nPayload:\n"        self.printJson(jsonInput = payload)        c = conn.request("POST", uri, jsonPayload, self.headers)        try:            connResponse = conn.getresponse()            jsonResponse = connResponse.read()            response = json.loads(jsonResponse)            if self.debugLevel > self.LEVEL_ERROR:                print "HTTP Status Code: %d" % (connResponse.status)                print "HTTP Reason: %s" % (connResponse.reason)            if (connResponse.status != 204):                self.printJson(jsonInput = response)            return (connResponse.status, response)        except Exception as ex:            raise ex    def get(self, uri):        conn = httplib.HTTPSConnection(self.host)        conn.request("GET", uri, body=None, headers = self.headers)        if self.debugLevel > self.LEVEL_HTTP_STATUS_CODE :            print "\nGET " + uri        try:            connResponse = conn.getresponse()            jsonResponse = connResponse.read()            response = ""            if connResponse.status != 204:                response = json.loads(jsonResponse)                self.printJson(response)            if self.debugLevel > self.LEVEL_ERROR :                print "HTTP Status Code: %d" % (connResponse.status)                print "HTTP Reason: %s" % (connResponse.reason)            return (connResponse.status, response)        except Exception as ex:            raise ex    def put(self, uri):        conn = httplib.HTTPSConnection(self.host)        conn.request("PUT", uri, body=None, headers = self.headers)        if self.debugLevel > self.LEVEL_HTTP_STATUS_CODE:            print "\nPUT " + uri        try:            connResponse = conn.getresponse()            jsonResponse = connResponse.read()            response = ""            if connResponse.status != 204:                response = json.loads(jsonResponse)                self.printJson(response)            if self.debugLevel > self.LEVEL_ERROR:                print "HTTP Status Code: %d" % (connResponse.status)                print "HTTP Reason: %s" % (connResponse.reason)                return (connResponse.status, response)        except Exception as ex:            raise ex    def delete(self, uri):        conn = httplib.HTTPSConnection(self.host)        conn.request("DELETE", uri, body = None, headers = self.headers)        if self.debugLevel > self.LEVEL_HTTP_STATUS_CODE:            print "\nDELETE " + uri        try:            connResponse = conn.getresponse()            jsonResponse = connResponse.read()            response = ""            if connResponse.status != 204:                response = json.loads(jsonResponse)                self.printJson(response)            if self.debugLevel > self.LEVEL_ERROR:                print "HTTP Status Code: %d" % (connResponse.status)                print "HTTP Reason: %s" % (connResponse.reason)            return (connResponse.status, response)        except Exception as ex:            raise ex    def logon(self):        if self.debugLevel:            print "\n***** LOGON *****"        jsonContentTypeHeader = {'Content-type': 'application/json'}        conn = httplib.HTTPSConnection(self.host)        credentialsDict = {}        credentialsDict["credentials"] = {}        credentialsDict["credentials"]["username"] = self.username        credentialsDict["credentials"]["password"] = self.password        conn.request("POST", self.AUTH_URI, json.dumps(credentialsDict), jsonContentTypeHeader)        try:            response = json.loads(conn.getresponse().read())            if "authresponse" in response:                signature = str(response['authresponse']['signature'])                self.headers = {'Content-type': 'application/json', 'Authorization': "A10 %s" % signature}            else:                raise Exception("Unable to logon")        except Exception as ex:            raise Exception(ex.message)    def logoff(self):        if self.debugLevel:            print "\n***** LOGOFF *****"        conn = httplib.HTTPSConnection(self.host)        conn.request("POST", self.LOGOFF_URI, "", self.headers)        response = conn.getresponse().read()        return response    def createServer(self,host,name,proto,port):        slbServerObject = {                "server": {                    "name": name,                    "host": host,                    "port-list": [                        {                            "protocol": proto,                            "port-number": port                        }                    ],                }            }        a10Device.post(uri = '/axapi/v3/slb/server', payload = slbServerObject)    def deleteServer(self,name):        a10Device.delete(uri = '/axapi/v3/slb/server/' + name)    def getServerOper(self,name):        serverOperObject = a10Device.get(uri = '/axapi/v3/slb/server/' + name + '/oper')        serverName = None        for k, v in serverOperObject[1]['server'].items():            if type(v) is dict:                for k1, v1 in v.items():                    print k1 + ":" + str(v1)            else:                if k == 'name':                    print "Server Name:" + v                    serverName = v        return serverName    def createServiceGroup(self, name, proto, listOfServers):        members = []        for server in listOfServers:            memberDict = { "name": server, "port": 80}            members.append(memberDict)        slbServiceGroupObject = {                              "service-group": {                                "name": name,                                "protocol": proto,                                "member-list": members                              }                            }        a10Device.post(uri = '/axapi/v3/slb/service-group', payload = slbServiceGroupObject)    def deleteServiceGroup(self,name):        a10Device.delete(uri = '/axapi/v3/slb/service-group/' + name)    def createVirtualServer(self, host, name, proto, port):        slbVirtualServerObject = {                "virtual-server": [                {                    "name":name,                    "ip-address":host,                    "port-list": [                                 {                                "port-number":port,                                "protocol":proto,                                }                     ]                 }            ]        }        a10Device.post(uri = '/axapi/v3/slb/virtual-server', payload = slbVirtualServerObject)    def deleteVirtualServer(self, name):        a10Device.delete(uri = '/axapi/v3/slb/virtual-server/' + name)    def getVirtualServerOper(self, name):        a10Device.get(uri = '/axapi/v3/slb/virtual-server/' + name + '/oper')if __name__ == "__main__":    a10Device = a10Device(hostIp = '10.0.1.99')    a10Device.debugLevel = a10Device.LEVEL_DEBUG_ALL    a10Device.logon()    #for x in (range(1,5)):       # a10Device.createServer(host = "1.2.3." + str(x), name = "sr" + str(x), proto = "tcp", port = 80)    #for x in (range(1,5)):        #a10Device.deleteServer(name = "sr" + str(x))    #for x in (range(1,5)):        #a10Device.getServerOper(name = "sr" + str(x))    #listOfServers = []    #for x in (range(1,5)):        #listOfServers.append(a10Device.getServerOper(name = "sr" + str(x)))    #a10Device.createServiceGroup(name = "sg1",proto = "tcp", listOfServers = listOfServers)    #a10Device.deleteServiceGroup(name = "sg1")    #a10Device.createVirtualServer(host = "1.1.1.1", name = "vip1", proto = "http", port = "8080")    #a10Device.deleteVirtualServer(name = "vip1")    #a10Device.getVirtualServerOper(name = "web1")    a10Device.create6Server(name = "fooblah", host = "1.1.1.1", proto = "tcp", port = "999")    a10Device.logoff()